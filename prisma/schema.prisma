generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model collection {
  id               Int                @id @default(autoincrement())
  name             String             @db.VarChar(255)
  image            String             @db.VarChar(255)
  description      String             @db.VarChar(255)
  author_id        Int         
  safe Boolean @default(true)    
  created_at       DateTime?          @db.Timestamp(0) @default(now())
  updated_at       DateTime?          @db.Timestamp(0) @default(now())
  users            users              @relation(fields: [author_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "collection_author_id_foreign")
  manga manga[]
}



model manga {
  id               Int                @id @default(autoincrement()) 
  name             String             @db.VarChar(255)
  slug             String           @db.VarChar(255)  @unique
  image            String             @db.VarChar(255)
  description      String             @db.VarChar(255)
  url              String             @db.VarChar(255)
  chapters         Json
  created_at       DateTime?          @db.Timestamp(0) @default(now())
  updated_at       DateTime?          @db.Timestamp(0) @default(now())
  safe  Boolean @default(true)
  collection collection[]
  sourceId Int
  source source @relation(fields: [sourceId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  @@unique([slug,sourceId])
  bookmark bookmark[]
}


model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model personal_access_tokens {
  id             Int    @id @default(autoincrement()) 
  tokenable_type String    @db.VarChar(255)
  tokenable_id   String    @db.VarChar(255)
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0) @default(now())
  updated_at     DateTime? @db.Timestamp(0) @default(now())

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model source {
  id         Int       @id @default(autoincrement()) 
  url        String    @db.VarChar(255)
  name       String    @db.VarChar(255)
  image      String    @db.VarChar(255)
  selector   Json
  order      Int
  safe       Boolean   @default(true)
  created_at DateTime? @db.Timestamp(0) @default(now())
  updated_at DateTime? @db.Timestamp(0) @default(now())
  type  String @default("normal")
  mangas manga[]
}

model users {
  id                Int       @id @default(autoincrement())
  name              String       @db.VarChar(255)
  email             String       @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime?    @db.Timestamp(0)
  password          String       @db.VarChar(255)
  remember_token    String?      @db.VarChar(100)
  created_at        DateTime?    @db.Timestamp(0) @default(now())
  updated_at        DateTime?    @db.Timestamp(0) @default(now())
  pin String? 
  is_admin          Boolean      @default(false)
  safe          Boolean      @default(true)
  collection        collection[]
  bookmark bookmark[]
}

model bookmark {
  id  Int @id @default(autoincrement())
  readed Json?
  reading String
  position String?
  userId Int
  user users @relation(fields: [userId],references: [id],onDelete: Cascade,onUpdate: Cascade)
  mangaId String
  manga manga @relation(fields: [mangaId],references: [slug],onDelete: Cascade,onUpdate: Cascade)
  created_at DateTime @db.Timestamp(0) @default(now())
  updated_at DateTime @db.Timestamp(0) @default(now())
}